[
  {
    "prompt": "Write a Python function to solve: Given an array of integers nums and an integer target, return indices of two numbers that add up to target.",
    "solution": "def twoSum(nums, target):\n    seen = {}\n    for i, num in enumerate(nums):\n        if target - num in seen:\n            return [seen[target - num], i]\n        seen[num] = i",
    "test_cases": [
      {
        "input": "twoSum([2,7,11,15], 9)",
        "output": "[0,1]"
      },
      {
        "input": "twoSum([3,2,4], 6)",
        "output": "[1,2]"
      }
    ],
    "difficulty": "medium"
  },
  {
    "prompt": "Write a Python function to solve: Given an array of integers nums and an integer target, return indices of two numbers that add up to target.\n\nExample: twoSum([2,7,11,15], 9) should return [0,1]",
    "solution": "def twoSum(nums, target):\n    seen = {}\n    for i, num in enumerate(nums):\n        if target - num in seen:\n            return [seen[target - num], i]\n        seen[num] = i",
    "test_cases": [
      {
        "input": "twoSum([2,7,11,15], 9)",
        "output": "[0,1]"
      },
      {
        "input": "twoSum([3,2,4], 6)",
        "output": "[1,2]"
      }
    ],
    "difficulty": "easy"
  },
  {
    "prompt": "Write a Python function to solve: Given a signed 32-bit integer x, return x with its digits reversed.",
    "solution": "def reverseInteger(x):\n    sign = -1 if x < 0 else 1\n    x = abs(x)\n    rev = int(str(x)[::-1])\n    return sign * rev if rev < 2**31 else 0",
    "test_cases": [
      {
        "input": "reverseInteger(123)",
        "output": "321"
      },
      {
        "input": "reverseInteger(-123)",
        "output": "-321"
      }
    ],
    "difficulty": "medium"
  },
  {
    "prompt": "Write a Python function to solve: Given a signed 32-bit integer x, return x with its digits reversed.\n\nExample: reverseInteger(123) should return 321",
    "solution": "def reverseInteger(x):\n    sign = -1 if x < 0 else 1\n    x = abs(x)\n    rev = int(str(x)[::-1])\n    return sign * rev if rev < 2**31 else 0",
    "test_cases": [
      {
        "input": "reverseInteger(123)",
        "output": "321"
      },
      {
        "input": "reverseInteger(-123)",
        "output": "-321"
      }
    ],
    "difficulty": "easy"
  },
  {
    "prompt": "Write a Python function to solve: Given an integer x, return true if x is a palindrome.",
    "solution": "def isPalindrome(x):\n    if x < 0:\n        return False\n    return str(x) == str(x)[::-1]",
    "test_cases": [
      {
        "input": "isPalindrome(121)",
        "output": "True"
      },
      {
        "input": "isPalindrome(-121)",
        "output": "False"
      }
    ],
    "difficulty": "medium"
  },
  {
    "prompt": "Write a Python function to solve: Given an integer x, return true if x is a palindrome.\n\nExample: isPalindrome(121) should return True",
    "solution": "def isPalindrome(x):\n    if x < 0:\n        return False\n    return str(x) == str(x)[::-1]",
    "test_cases": [
      {
        "input": "isPalindrome(121)",
        "output": "True"
      },
      {
        "input": "isPalindrome(-121)",
        "output": "False"
      }
    ],
    "difficulty": "easy"
  },
  {
    "prompt": "Write a Python function to solve: Given a string s containing just '()', '{}', '[]', determine if input is valid.",
    "solution": "def isValid(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            stack.append(char)\n    return not stack",
    "test_cases": [
      {
        "input": "isValid('()')",
        "output": "True"
      },
      {
        "input": "isValid('()[]{}')",
        "output": "True"
      }
    ],
    "difficulty": "medium"
  },
  {
    "prompt": "Write a Python function to solve: Given a string s containing just '()', '{}', '[]', determine if input is valid.\n\nExample: isValid('()') should return True",
    "solution": "def isValid(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            stack.append(char)\n    return not stack",
    "test_cases": [
      {
        "input": "isValid('()')",
        "output": "True"
      },
      {
        "input": "isValid('()[]{}')",
        "output": "True"
      }
    ],
    "difficulty": "easy"
  },
  {
    "prompt": "Write a Python function to solve: Merge two sorted linked lists and return it as a sorted list.",
    "solution": "def mergeTwoLists(l1, l2):\n    dummy = ListNode(0)\n    curr = dummy\n    while l1 and l2:\n        if l1.val <= l2.val:\n            curr.next = l1\n            l1 = l1.next\n        else:\n            curr.next = l2\n            l2 = l2.next\n        curr = curr.next\n    curr.next = l1 or l2\n    return dummy.next",
    "test_cases": [
      {
        "input": "mergeTwoLists([1,2,4], [1,3,4])",
        "output": "[1,1,2,3,4,4]"
      }
    ],
    "difficulty": "medium"
  },
  {
    "prompt": "Write a Python function to solve: Merge two sorted linked lists and return it as a sorted list.\n\nExample: mergeTwoLists([1,2,4], [1,3,4]) should return [1,1,2,3,4,4]",
    "solution": "def mergeTwoLists(l1, l2):\n    dummy = ListNode(0)\n    curr = dummy\n    while l1 and l2:\n        if l1.val <= l2.val:\n            curr.next = l1\n            l1 = l1.next\n        else:\n            curr.next = l2\n            l2 = l2.next\n        curr = curr.next\n    curr.next = l1 or l2\n    return dummy.next",
    "test_cases": [
      {
        "input": "mergeTwoLists([1,2,4], [1,3,4])",
        "output": "[1,1,2,3,4,4]"
      }
    ],
    "difficulty": "easy"
  }
]